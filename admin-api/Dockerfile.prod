# select build image
FROM rust:1.52 as build

# create a new empty shell project
RUN USER=root cargo new --bin --vcs none admin-api
WORKDIR /admin-api

COPY admin-api/Cargo.lock ./Cargo.lock
COPY admin-api/Cargo.toml ./Cargo.toml
COPY ./proto ../proto
COPY ./mmt ../mmt
COPY ./mmt-db ../mmt-db
COPY ./mmt-derive ../mmt-derive

RUN echo "fn main() {}" > dummy.rs
RUN echo "fn main() {}" > dummylib.rs
RUN sed -i 's#src/bin/main.rs#dummy.rs#' Cargo.toml
RUN sed -i 's#src/lib.rs#dummylib.rs#' Cargo.toml
RUN cargo build --release
RUN sed -i 's#dummy.rs#src/bin/main.rs#' Cargo.toml
RUN sed -i 's#dummylib.rs#src/lib.rs#' Cargo.toml

# this build step will cache your dependencies
# RUN cargo build --release
# RUN rm src/*.rs

# copy your source tree
COPY admin-api/src ./src

# build for release
RUN rm /admin-api/target/release/admin-api*
RUN cargo build --release

# our final base
#FROM alpine
FROM ubuntu@sha256:5f4bdc3467537cbbe563e80db2c3ec95d548a9145d64453b06939c4592d67b6d

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get -y install ca-certificates libssl-dev && rm -rf /var/lib/apt/lists/*

WORKDIR /admin-api

# copy the build artifact from the build stage
COPY --from=build /admin-api/target/release/admin-api ./admin-api
# COPY ./Rocket.toml ./Rocket.toml
#
EXPOSE 8000

# set the startup command to run your binary
CMD ["./admin-api"]
